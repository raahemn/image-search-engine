# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy the Frontend to Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PROJECT_ID: jetrr-raahem-nabeel-1 # TODO: update Google Cloud project id
  GAR_LOCATION: us-central1 # TODO: update Artifact Registry location
  SERVICE: imsfrontend # TODO: update Cloud Run service name
  REGION: us-central1 # TODO: update Cloud Run service region
  REPOSITORY: gcr.io
  IMAGE_URL: gcr.io/jetrr-raahem-nabeel-1/imsfrontendfinal1
  IMAGE: imsfrontendfinal1

# jobs:
#   deploy:
#     # Add 'id-token' with the intended permissions for workload identity federation
#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       # - name: Google Auth
#       #   id: auth
#       #   uses: 'google-github-actions/auth@v0'
#       #   with:
#       #     token_format: 'access_token'
#       #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
#       #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

#       # NOTE: Alternative option - authentication via credentials json
#       - name: Google Auth
#         id: auth
#         uses: 'google-github-actions/auth@v2'
#         with:
#           credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

#       # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

#       # Authenticate Docker to Google Cloud Artifact Registry
#       # - name: Docker Auth
#         # id: docker-auth
#         # uses: 'docker/login-action@v1'
#         # with:
#         #   username: 'oauth2accesstoken'
#         #   password: '${{ steps.auth.outputs.access_token }}'
#         #   registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
        
#       - name: Docker Configuration
#         run: |
#             gcloud auth configure-docker us-central1-docker.pkg.dev

#       - name: Build and Push Container
#         working-directory: ./frontend/image-search
#         run: |-
#           # docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest" ./
#           # docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest"

          
#           docker build -t us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY}}/${{ env.IMAGE}}
#           :{{ github.sha} -t us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY}}/${{ env.IMAGE}}:latest --push web-client
          
#           # latest ./
#           # docker push "${{ env.IMAGE_URL }}:latest"

#       # END - Docker auth and build

#       - name: Deploy to Cloud Run
#         id: deploy
#         uses: google-github-actions/deploy-cloudrun@v1
#         with:
#           service: ${{ env.SERVICE }}
#           region: ${{ env.REGION }}
#           # NOTE: If using a pre-built image, update the image name here
#           image: us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY}}/${{ env.IMAGE}}:latest 

#       # If required, use the Cloud Run url output in later steps
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          # service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1  
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
      - name: Docker Auth
        run: |
          gcloud auth configure-docker gcr.io

          
      - name: setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image
        working-directory: ./frontend/image-search
        run: | 
          docker buildx build --platform linux/amd64, linux/arm64 -t gcr.io/jetrr-raahem-nabeel-1/imsfrontendfinal1:test-git .
          docker push gcr.io/jetrr-raahem-nabeel-1/imsfrontendfinal1:test-git                      


      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy imsfrontend \
            --image gcr.io/jetrr-raahem-nabeel-1/imsfrontendfinal1:test-git \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --port=3000

      - name: Show Output
        run: echo "Deployment complete"
#       - name: Show Output
#         run: echo ${{ steps.deploy.outputs.url }}
